# Azure DevOps Pipeline to deploy a SAP VM and subsequent tasks

parameters:
- name: size
  displayName: SAP VM Size
  type: string
  default: Standard_E2ds_v4
  values:
  - Standard_E2ds_v4
  - Standard_E4ds_v4
  - Standard_E8ds_v4
  - Standard_E16ds_v4
  - Standard_E32ds_v4
  - Standard_E48ds_v4
  - Standard_E64ds_v4
  - Standard_E80ids_v4

- name: os
  displayName: Operating System
  type: string
  default: "SLES 15 SP2"
  values:
  - "RHEL 7.7"
  - "RHEL 8.1"
  - "SLES 12 SP5"
  - "SLES 15 SP2"
  - "CUSTOM"

- name: encryption
  displayName: Enable double encryption with CMK
  type: boolean
  default: "true"

- name: encryptionset
  displayName: Disk encryption set name
  type: string
  default: "SAPDiskEncryptionSetGEWC"

- name: encryptionsetrg
  displayName: Disk encryption set resource group
  type: string
  default: "SAPonAzureGermany"
  values:
  - "SAPonAzureWestEurope"
  - "SAPonAzureNorthEurope"
  - "SAPonAzureGermany"
  - "SAPonAzureFrance"
  - "SAPonAzureWestUS"

- name: sid
  displayName: SAP System ID
  type: string
  default: "SID"

- name: nr
  displayName: SAP Instance Number (00-99)
  type: string
  default: "00"

- name: rg
  displayName: HANA VM resource group
  type: string
  default: "RG-SAPTEST"

- name: vmname
  displayName: SAP VM Name in Azure
  type: string
  default: "SAPTEST"

- name: hostname
  displayName: SAP Host Name in the OS
  type: string
  default: "saptest"

- name: ipaddress
  displayName: Provide a static IP address if required, e.g. 10.110.96.4
  type: string
  default: "dynamic"

- name: location
  displayName: Target Region
  type: string
  default: "Germany West Central"
  values:
  - "West Europe"
  - "North Europe"
  - "France Central"
  - "Germany West Central"

- name: vnet
  displayName: Target VNET
  type: string
  default: "vnet-sap-prod-germanywestcentral-001"
  values:
  - "vnet-sap-prod-westeurope-001"
  - "vnet-sap-prod-germanywestcentral-001"
  - "SAPDemoEnvironmentNetwork"
  - "DEV-NOEU-SAP02-vnet"
  - "MIM-GEWC-SAP04-vnet"

- name: subnet
  displayName: Target subnet
  type: string
  default: "snet-sap-prod-germanywestcentral-001"
  values:
  - "snet-sap-prod-westeurope-001"
  - "snet-sap-prod-germanywestcentral-001"
  - "sapprdsubnet"
  - "DEV-NOEU-SAP02_db-subnet"
  - "MIM-GEWC-SAP04_db-subnet"

- name: vnetrg
  displayName: VNET resource group
  type: string
  default: "SAPonAzureGermany"
  values:
  - "MIM-GEWC-SAP04-INFRASTRUCTURE"
  - "SAPonAzureWestEurope"
  - "SAPonAzureNorthEurope"
  - "SAPonAzureGermany"
  - "SAPonAzureFrance"
  - "SAPonAzureWestUS"

- name: availzone
  displayName: Availability Zone
  type: number
  default: 1
  values:
  - 0
  - 1
  - 2
  - 3

- name: sapvmdeployment
  displayName: SAP VM Deployment
  type: boolean
  default: True

- name: osprep
  displayName: OS Preparations
  type: boolean
  default: True

- name: installation
  displayName: SAP Installation
  type: boolean
  default: false

- name: backupsetup
  displayName: SAP Backup Setup
  type: string
  default: "None"
  values:
  - "Non-PROD"
  - "PROD"
  - "None"

- name: monitoringextsap
  displayName: Azure Monitoring Extension for SAP
  type: boolean
  default: False

- name: cleanup
  displayName: Remove everything at the end
  type: boolean
  default: False

trigger:
  none

pool:
  name: $(Agent)

variables:
  - group: "SAP-deployments"
  - name: backuptype
    value: ${{ parameters.backupsetup }}
  - name: backuptodo
    value: $[ ne(variables['backuptype'], 'None') ]
  - name: vmrg
    value: ${{ parameters.rg }}
  - name: containersuffix
    value: "$(vmrg);${{ parameters.vmname }}"
  - name: backupcontainer
    value: "VMAppContainer;Compute;$(containersuffix)"
  - name: vmid
    value: /subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/$(vmrg)/providers/Microsoft.Compute/virtualMachines/${{ parameters.vmname }}
  - name: subnetid
    value: /subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/${{ parameters.vnetrg }}/providers/Microsoft.Network/virtualNetworks/${{ parameters.vnet }}/subnets/${{ parameters.subnet }}
  - name: osvar
    value: ${{ parameters.os }}
  - name: usepyth3
    value: $[ or(eq(variables['osvar'], 'SLES 15 SP2'),eq(variables['osvar'], 'RHEL 8.1')) ]

name: ${{ parameters.vmname }}_${{ parameters.sid }}_${{ parameters.nr }}_${{ parameters.os }}_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Publish_Pipeline_Artifact
  jobs:
  - job: Publish_Pipeline_Artifact
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: sap

- stage: Deploy_VM
  condition: eq(${{ parameters.sapvmdeployment }}, true)
  jobs:
  - job: Deploy_VM
    steps:
    - checkout: none
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: sap

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'SAP VM Deployment via ARM'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(AZURE_CONNECTION_NAME)'
        subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(vmrg)'
        location: ${{ parameters.location }}
        templateLocation: 'Linked artifact'
        csmFile: $(System.DefaultWorkingDirectory)/ARM-Template/sap-app-vm.json
        overrideParameters: '-adminUsername "$(adminuser)" -adminPasswordOrKey "$(pubsshkey)" -vmNameInput "${{ parameters.vmname }}" -HostNameInput "${{ parameters.hostname }}" -sapSystemId "${{ parameters.sid }}" -sapSystemSize "${{ parameters.size }}" -osType "${{ parameters.os }}" -subnetId "$(subnetid)" -ipaddress ${{ parameters.ipaddress }} -availabilityZone ${{ parameters.availzone }} -Script_URL "$(url-disk-cfg)" -diagnosticsStorageAccount "$(diagnosticsstorageaccount)" -encryption "${{ parameters.encryption }}" -encryptionset "${{ parameters.encryptionset }}" -encryptionsetrg "${{ parameters.encryptionsetrg }}" '
        deploymentMode: 'Incremental'
        deploymentName: 'sap-vm-${{ parameters.sid }}-$(Build.BuildId)'
        deploymentOutputs: 'arm_output'

    - script: |
        #!/bin/bash
        green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
        if [[ -z $(arm_output) ]]; then
          echo "##vso[task.logissue type=error]Variable arm_output is empty"
          exit 2
        else
          echo -e "$green--- Writing arm_output into the inventory ---$reset"
          echo $(arm_output)
          cd $(Build.Repository.LocalPath)
          mkdir -p $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}
          echo $(arm_output)                    > $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.json
          echo $(arm_output.sapvmname.value)    > $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.sapvmname
          echo $(arm_output.sapsid.value)       > $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.sapsid
          echo $(arm_output.sapprivateip.value) > $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.sapprivateip
          echo -e "$green--- Adding deployment automation configuration to devops repository ---$reset"
          git checkout $(Build.SourceBranchName)
          git config --global user.email "$(Build.RequestedForEmail)"
          git config --global user.name "$(Build.RequestedFor)"
          git add -f $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.json
          git add -f $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.sapvmname
          git add -f $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.sapsid
          git add -f $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.sapprivateip
          git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
          git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
        fi
      displayName: Write Inventory JSON and add this information to the Azure DevOps repository
      env:
        SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
      failOnStderr: false
- stage: Prepare_OS
  condition: eq(${{ parameters.osprep }}, true)
  jobs:
  - job: Prepare_OS
    steps:
    - checkout: none
    - script: |
        #!/bin/bash
        privateip=`cat $(System.DefaultWorkingDirectory)/Inventory/${{ parameters.sid }}/${{ parameters.vmname }}.sapprivateip`
        echo "##vso[task.setvariable variable=privateip]$privateip"
        entry=`ssh-keygen -F $privateip`
        if [[ -n $entry ]]
        then
          echo "Known host entry will be removed"
          ssh-keygen -f "~/.ssh/known_hosts" -R $privateip
        else
          echo "No entry found, nothing to remove"
        fi
        exit 0
      displayName: Remove known_hosts entries from former runs that used the same name or ip
      failOnStderr: false

    - task: Ansible@0
      displayName: 'OS Preparations RHEL8 / SLES 15(Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'Ansible/os-settings_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [sap]
          $(privateip)
        args: -vv -e 'ansible_python_interpreter=/usr/bin/python3'
        failOnStdErr: false
      condition: and(eq(${{ parameters.osprep }}, true), eq(variables.usepyth3, true))
      env:
        ANSIBLE_DISPLAY_SKIPPED_HOSTS: False
        ANSIBLE_HOST_KEY_CHECKING: False
        ANSIBLE_SSH_HOST_KEY_CHECKING: False

    - task: Ansible@0
      displayName: 'OS Preparations RHEL7 / SLES 12 (Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'Ansible/os-settings_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [sap]
          $(privateip)
        args: -vv 
        failOnStdErr: false
      condition: and(eq(${{ parameters.osprep }}, true), eq(variables.usepyth3, false))
      env:
        ANSIBLE_DISPLAY_SKIPPED_HOSTS: False
        ANSIBLE_HOST_KEY_CHECKING: False
        ANSIBLE_SSH_HOST_KEY_CHECKING: False

- stage: Install_SAP
  condition: eq(${{ parameters.installation }}, true)
  jobs:
  - job: Install_SAP
    steps:
    - checkout: none
    - script: |
        #!/bin/bash
        privateip=`cat ~/Inventory/${{ parameters.vmname }}.privateip`
        echo "##vso[task.setvariable variable=privateip]$privateip"
        exit 0
      displayName: Get private IP for following ansible tasks 
      failOnStderr: false
    - task: Ansible@0
      displayName: 'SAP Installation (Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'Ansible/sap-install_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [sap]
          $(privateip)
        args: -vv -e sap_sid=${{ parameters.sid }} -e sap_hostname=${{ parameters.hostname }} -e sap_instancenum=${{ parameters.nr }} -e pw_db_system=$(sap-pw) -e sapbits_storage=${sapbitssstorageaccountname}
        failOnStdErr: false

- stage: OS_Backup
  condition: eq(variables.backuptodo, true)
  jobs:
  - job: Backup_Activation
    steps:
    - checkout: none
    - task: PowerShell@2
      displayName: 'OS Backup Setup (PWSH)'
      inputs:
        targetType: 'filePath'
        filePath: '$(System.DefaultWorkingDirectory)/Scripts/BackupEnableOS.ps1'
        arguments: >
          -RSV "$(rsv)"
          -RGV "$(rsv-rg)"
          -VM "${{ parameters.vmname }}"
          -SERVER "${{ parameters.hostname }}"
          -VMRG "$(vmrg)"
          -POL "$(backuptype)"
        errorActionPreference: continue
        showWarnings: true
        failOnStderr: false

- stage: Monitoring_EXT_SAP
  condition: eq(${{ parameters.monitoringextsap }}, true)
  jobs:
  - job: Monitoring_EXT_SAP
    steps:
    - checkout: none
    - task: PowerShell@2
      displayName: 'Azure Monitoring Extension for SAP (PWSH)'
      # https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/deployment-guide#bb61ce92-8c5c-461f-8c53-39f5e5ed91f2
      inputs:
        targetType: 'filePath'
        filePath: '$(System.DefaultWorkingDirectory)/Scripts/SAPonAzureMonitoringExtension.ps1'
        arguments: >
          -VM                     "${{ parameters.vmname }}"
          -VMRG                   "$(vmrg)"
          -ARM_CLIENT_ID          $(ARM_CLIENT_ID)
          -ARM_CLIENT_SECRET      $(ARM_CLIENT_SECRET)
          -ARM_SUBSCRIPTION_ID    $(ARM_SUBSCRIPTION_ID)
          -ARM_TENANT_ID          $(ARM_TENANT_ID)
        errorActionPreference: continue
        showWarnings: true
        failOnStderr: false

- stage: Cleanup
  condition: eq(${{ parameters.cleanup }}, true)
  jobs:
  - job: Remove_Backups
    steps:
    - checkout: none
    - task: PowerShell@2
      displayName: 'SAP Backup Removal (PWSH)'
      inputs:
        targetType: 'filePath'
        filePath: '$(System.DefaultWorkingDirectory)/Scripts/BackupDisable.ps1'
        arguments: >
          -SID                     "${{ parameters.sid }}"
          -RSV                     "$(rsv)"
          -RGV                     "$(rsv-rg)"
          -VM                      "${{ parameters.vmname }}"
          -VMRG                    "$(vmrg)"
          -POL                    "NA"
          -ARM_CLIENT_ID          "$(ARM_CLIENT_ID)"
          -ARM_CLIENT_SECRET      "$(ARM_CLIENT_SECRET)"
          -ARM_SUBSCRIPTION_ID    "$(ARM_SUBSCRIPTION_ID)"
          -ARM_TENANT_ID          "$(ARM_TENANT_ID)"
        errorActionPreference: continue
        showWarnings: true
        failOnStderr: false

  - job: Remove_RG
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Remove Resource Group'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(AZURE_CONNECTION_NAME)'
        subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
        action: 'DeleteRG'
        resourceGroupName: '$(vmrg)'
